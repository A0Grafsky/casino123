import os

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from datetime import datetime
import aiosqlite
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.inline_keyboard import create_inline_kb
from lexicon.lexicon_ru import LEXICON_RU
from database import database as db
from workers.qr_code import QRCode

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TradeUserCoins(StatesGroup):
    choose_trade_type = State()
    lucky_to_cash = State()
    cash_to_chips = State()
    accept_lucky_cash_trade = State()
    accept_cash_chips_trade = State()


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ '–º–æ–Ω–µ—Ç–∞', –æ–±–º–µ–Ω, —Ç—Ä–µ–π–¥–∏–Ω–≥ —Å –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data == 'coins')
async def handle_coins(callback: CallbackQuery):
    coins = await db.coins_user_from_users(str(callback.from_user.id))
    nickname = await db.nickname_from_users_where_id(str(callback.from_user.id))
    await callback.message.edit_text(text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, {nickname[0][0]}\n\n'
                                          f'–ù–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É:\n\n'
                                          f'<b>Lucky</b>: {coins[0][0]}\n'
                                          f'<b>CashOnline</b>: {coins[0][1]}\n'
                                          f'<b>OtherCoins</b>: {coins[0][2]}\n'
                                          f'<b>Chips</b>: {coins[0][3]}\n\n'
                                          f'–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                                     reply_markup=create_inline_kb(2, 'trade', 'trade_admin',
                                                                   'history', last_btn='back'))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±–º–µ–Ω, —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–æ–≥–∏–∫–∞ –æ–±–º–µ–Ω–∞
@router.callback_query(F.data == 'trade')
async def trade_user_coins(callback: CallbackQuery, state: FSMContext):
    coins = await db.coins_user_from_users(str(callback.from_user.id))
    rate_coin = await db.if_rate_coins_for_table()
    await callback.message.edit_text(text=f'ü™ô–ù–∞ –í–∞—à–µ–º —Å—á–µ—Ç—Éü™ô\n\n'
                                          f'<b>Lucky</b>: {coins[0][0]}\n'
                                          f'<b>CashOnline</b>: {coins[0][1]}\n'
                                          f'<b>OtherCoins</b>: {coins[0][2]}\n\n'
                                          f'‚ùó–í–ê–ñ–ù–û‚ùó\n\n'
                                          f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å Lucky –Ω–∞ CashOnline, –∞ —Ç–∞–∫–∂–µ CashOnline –Ω–∞ —Ñ–∏—à–∫–∏. –ï—Å–ª–∏ '
                                          f'–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω, —Ç–æ <u><b>–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, '
                                          f'–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –∫—É—Ä—Å</b></u>, '
                                          f'–µ—Å–ª–∏ –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ–≥–æ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                                          f'<u><b>–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b></u>\n\n'
                                          f'–û–¥–Ω–∞ –º–æ–Ω–µ—Ç–∞ {rate_coin[0][1]} —Å—Ç–æ–∏—Ç {rate_coin[0][2]}\n'
                                          f'–û–¥–Ω–∞ —Ñ–∏—à–∫–∞ —Å—Ç–æ–∏—Ç {str(rate_coin[1][2])} {rate_coin[1][0]}\n\n',
                                     reply_markup=create_inline_kb(1, *['Lucky –Ω–∞ CashOnline', 'CashOnline –Ω–∞ —Ñ–∏—à–∫–∏'], last_btn='back_delete'))
    await state.set_state(TradeUserCoins.choose_trade_type)

@router.callback_query(F.data.in_(['Lucky –Ω–∞ CashOnline', 'CashOnline –Ω–∞ —Ñ–∏—à–∫–∏']), TradeUserCoins.choose_trade_type)
async def trade_lucky_to_online(callback: CallbackQuery, state:FSMContext):
    if callback.data == 'Lucky –Ω–∞ CashOnline':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç Lucky, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã—Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ CashOnline')
        await state.set_state(TradeUserCoins.lucky_to_cash)
    if callback.data == 'CashOnline –Ω–∞ —Ñ–∏—à–∫–∏':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç CashOnline, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã—Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ñ–∏—à–∫–∏')
        await state.set_state(TradeUserCoins.cash_to_chips)

@router.message(F.text, StateFilter(*[TradeUserCoins.lucky_to_cash, TradeUserCoins.cash_to_chips]))
async def input_trade(message: Message, state: FSMContext):
    if await state.get_state() == TradeUserCoins.lucky_to_cash:
        current_time = datetime.now().isoformat()
        rate_coin = await db.if_rate_coins_for_table()
        lucky_coin_user = await db.coins_user_from_users(str(message.from_user.id))
        try:
            if float(message.text) == int or float and float(message.text) <= float(lucky_coin_user[0][0]):
                await state.update_data(lucky_coin=float(message.text))
                data = await state.get_data()
                lucky_coin = data['lucky_coin']
                await state.set_state(TradeUserCoins.accept_lucky_cash_trade)
                await state.update_data(lucky_coin=lucky_coin)
                await message.answer(
                    f'{lucky_coin} {rate_coin[0][0]} = {round(lucky_coin / rate_coin[0][2], 2)} {rate_coin[0][1]}\n\n'
                    f'<u><b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è</b></u> –∏–ª–∏ –∂–µ –Ω–∞–∂–∞—Ç—å <u><b>"–û—Ç–º–µ–Ω–∏—Ç—å"</b></u> '
                    f'–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.',
                    reply_markup=create_inline_kb(1, 'assent', last_btn='back_delete'))
            else:
                await message.answer(f'–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞')
        except ValueError:
            await message.answer(f'–û—à–∏–±–∫–∞! –í–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ –ª–∏–±–æ –Ω–µ–ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ!')
    if await state.get_state() == TradeUserCoins.cash_to_chips:
        current_time = datetime.now().isoformat()
        rate_coin = await db.if_rate_coins_for_table()
        cash_coin_user = await db.coins_user_from_users(str(message.from_user.id))
        try:
            if float(message.text) == int or float and float(message.text) <= float(cash_coin_user[0][1]):
                await state.update_data(cash=float(message.text))
                data = await state.get_data()
                cash = data['cash']
                await state.set_state(TradeUserCoins.accept_cash_chips_trade)
                await state.update_data(cash=cash)
                await message.answer(
                    f'{cash} {rate_coin[1][0]} = {round(cash / rate_coin[1][2], 2)} —Ñ–∏—à–µ–∫\n\n'
                    f'<u><b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è</b></u> –∏–ª–∏ –∂–µ –Ω–∞–∂–∞—Ç—å <u><b>"–û—Ç–º–µ–Ω–∏—Ç—å"</b></u> '
                    f'–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.',
                    reply_markup=create_inline_kb(1, 'assent', last_btn='back_delete'))
            else:
                await message.answer(f'–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞')
        except ValueError:
            await message.answer(f'–û—à–∏–±–∫–∞! –í–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ –ª–∏–±–æ –Ω–µ–ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π –æ–±–º–µ–Ω–∞
@router.callback_query(F.data == 'assent', StateFilter(*[TradeUserCoins.accept_lucky_cash_trade, TradeUserCoins.accept_cash_chips_trade]))
async def trade_user_coins_assent(callback: CallbackQuery, state: FSMContext):
    current_time = datetime.now().isoformat()
    if await state.get_state() == TradeUserCoins.accept_lucky_cash_trade:
        lucky_coin_user = await db.coins_user_from_users(str(callback.from_user.id))
        nickname = await db.nickname_from_users_where_id(str(callback.from_user.id))
        rate_coin = await db.if_rate_coins_for_table()
        data = await state.get_data()
        lucky_coin = data['lucky_coin']
        lucky_coin_user = float(lucky_coin_user[0][0]) - lucky_coin
        CashOnline = lucky_coin / rate_coin[0][2]
        await db.update_coin_for_user(user_id=str(callback.from_user.id), Lucky_coin=lucky_coin_user,
                                      CashOnline=round(CashOnline, 2))
        await state.clear()
        await callback.message.delete()
        await callback.answer(chat_id=callback.from_user.id, text=f'–£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω')
        await callback.message.answer(LEXICON_RU['start'] + f'\n\n‚ùó<b>–í–∞—à –Ω–∏–∫ - {nickname[0][0]}</b>‚ùó\n\n'
                                      + f'‚ùó<b>–í–∞—à id - {callback.from_user.id}</b>‚ùó',
                                      reply_markup=create_inline_kb(2, 'coins', 'merch',
                                                                    'referral'))
        await db.info_user_for_user(current_time)
    if await state.get_state() == TradeUserCoins.accept_cash_chips_trade:
        data = await state.get_data()
        nickname = await db.nickname_from_users_where_id(str(callback.from_user.id))
        cash_coin = data['cash']
        async with aiosqlite.connect('userdata.db') as conn:
            cash = await conn.execute('SELECT CashOnline FROM users WHERE user_id = ?', (callback.from_user.id,))
            cash = await cash.fetchall()
            chips = await conn.execute('SELECT Chips FROM users WHERE user_id = ?', (callback.from_user.id,))
            chips = await chips.fetchall()
            rate_cash_chips = await conn.execute('SELECT rate FROM rate_coins')
            rate_cash_chips = await rate_cash_chips.fetchall()
            print(rate_cash_chips)
            await conn.execute('UPDATE users SET CashOnline = ?, Chips = ? WHERE user_id = ?', (round(cash[0][0] - float(cash_coin), 2), chips[0][0] + round(cash_coin/rate_cash_chips[1][0], 2), callback.from_user.id))
            await conn.commit()
        await callback.message.delete()
        await callback.answer(chat_id=callback.from_user.id, text=f'–£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω')
        await callback.message.answer(LEXICON_RU['start'] + f'\n\n‚ùó<b>–í–∞—à –Ω–∏–∫ - {nickname[0][0]}</b>‚ùó\n\n'
                                      + f'‚ùó<b>–í–∞—à id - {callback.from_user.id}</b>‚ùó',
                                      reply_markup=create_inline_kb(2, 'coins', 'merch',
                                                                    'referral'))
        await db.info_user_for_user(current_time)
@router.callback_query(F.data == 'trade_admin')
async def qr_code(callback: CallbackQuery):
    qrcode = await QRCode(callback.from_user.id).code_generate()
    await callback.message.bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile(f'qr_code_{callback.from_user.id}.png'),
                                          caption='–î–∞–Ω–Ω—ã–π QR –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –≤–∞–º –≤—ã–¥–∞–ª–∏ —Ñ–∏—à–∫–∏')
    os.remove(f'qr_code_{callback.from_user.id}.png')


@router.callback_query(F.data == 'referral')
async def send_referral_link(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç user_id
    referral_link = f"https://t.me/Malevin_Cas_bot?start={user_id}"
    await callback.message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")

@router.callback_query(F.data == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
async def referrals_statistic(callback: CallbackQuery):
    async with aiosqlite.connect('userdata.db') as conn:
        referrals = await conn.execute('SELECT user_id, username, nickname, Lucky, CashOnline, Chips FROM users WHERE referral = ?', (callback.from_user.id,))
        referrals = await referrals.fetchall()
    if referrals == []:
        await callback.message.answer('–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª–∏.')
    else:
        for i in referrals:
            await callback.message.answer(f'<b>ID</b>: {i[0]}\n'
                                          f'<b>Username</b>: {i[1]}\n'
                                          f'<b>Nick</b>: {i[2]}\n'
                                          f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç LuckyCash</b>: {i[3]}\n'
                                          f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç CashOnline</b>: {i[4]}\n'
                                          f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫</b>: {i[5]}')

@router.callback_query(F.data == '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã')
async def get_bonus(callback: CallbackQuery):
    web_app_url = f"https://192.168.0.105:8000/scanbonus?user_id={callback.from_user.id}"
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="C–∫–∞–Ω–µ—Ä",
        url=web_app_url)
    )
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∫–∞–Ω–µ—Ä–∞ QR –∫–æ–¥–æ–≤:", reply_markup=builder.as_markup())
